swagger: '2.0'
info:
  description: Api Documentation
  version: '1.0'
  title: Api Documentation
  termsOfService: urn:tos
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
host: localhost:8080
basePath: /
tags:
  - name: guest-controller
    description: Guest Controller
  - name: reservation-controller
    description: Reservation Controller
  - name: schedule-controller
    description: Schedule Controller
  - name: tennis-court-controller
    description: Tennis Court Controller
paths:
  /guests:
    get:
      tags:
        - guest-controller
      summary: Finds all guests with the possibility to search by name
      operationId: findGuestsUsingGET
      produces:
        - '*/*'
      parameters:
        - name: name
          in: query
          description: name
          required: false
          type: string
      responses:
        '200':
          description: List of guests returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/GuestDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: No guest found.
      deprecated: false
    post:
      tags:
        - guest-controller
      summary: Adds a guest
      operationId: addGuestUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: guestDTO
          description: guestDTO
          required: true
          schema:
            $ref: '#/definitions/GuestDTO'
      responses:
        '200':
          description: OK
        '201':
          description: Guest successfully created.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    put:
      tags:
        - guest-controller
      summary: Updates a guest
      operationId: updateGuestUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: guestDTO
          description: guestDTO
          required: true
          schema:
            $ref: '#/definitions/GuestDTO'
      responses:
        '200':
          description: Guest successfully updated.
          schema:
            $ref: '#/definitions/GuestDTO'
        '201':
          description: Created
        '400':
          description: Invalid guestID.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Guest not found
      deprecated: false
  /guests/{guestId}:
    get:
      tags:
        - guest-controller
      summary: Finds a guest by ID
      operationId: findGuestByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: guestId
          in: path
          description: guestId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Guest successfully found.
          schema:
            $ref: '#/definitions/GuestDTO'
        '400':
          description: Invalid guestID.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Guest not found
      deprecated: false
    delete:
      tags:
        - guest-controller
      summary: Delete a guest
      operationId: deleteGuestUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: guestId
          in: path
          description: guestId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Guest successfully deleted.
        '204':
          description: No Content
        '400':
          description: Invalid guestID.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Guest not found
      deprecated: false
  /reservations:
    post:
      tags:
        - reservation-controller
      summary: Books a reservation
      operationId: bookReservationUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: createReservationRequestDTO
          description: createReservationRequestDTO
          required: true
          schema:
            $ref: '#/definitions/CreateReservationRequestDTO'
      responses:
        '200':
          description: OK
        '201':
          description: Reservation successfully booked.
        '400':
          description: Invalid guestID or/and scheduleID.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Guest or/and Schedule not Found
      deprecated: false
    put:
      tags:
        - reservation-controller
      summary: Reschedules a reservation
      operationId: rescheduleReservationUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: rescheduleReservationRequestDTO
          description: rescheduleReservationRequestDTO
          required: true
          schema:
            $ref: '#/definitions/RescheduleReservationRequestDTO'
      responses:
        '200':
          description: Reservation successfully rescheduled.
          schema:
            $ref: '#/definitions/ReservationDTO'
        '201':
          description: Created
        '400':
          description: Invalid reservationID and/or scheduleID.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Reservation or/and schedule not Found
      deprecated: false
  /reservations/collection:
    post:
      tags:
        - reservation-controller
      summary: Books a list of reservations
      operationId: bookReservationsUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: createReservationRequestDTOList
          description: createReservationRequestDTOList
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/CreateReservationRequestDTO'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ReservationDTO'
        '201':
          description: Reservations successfully booked.
          schema:
            type: array
            items:
              $ref: '#/definitions/ReservationDTO'
        '400':
          description: Invalid guestID or/and scheduleID.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Guest or/and Schedule not found
      deprecated: false
  /reservations/history:
    get:
      tags:
        - reservation-controller
      summary: Returns the list of historical reservations
      operationId: findHistoricalReservationsUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: List of reservations returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/ReservationDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: No reservation found.
      deprecated: false
  /reservations/{reservationId}:
    get:
      tags:
        - reservation-controller
      summary: Finds a reservation by ID
      operationId: findReservationUsingGET
      produces:
        - '*/*'
      parameters:
        - name: reservationId
          in: path
          description: reservationId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Reservation successfully found.
          schema:
            $ref: '#/definitions/ReservationDTO'
        '400':
          description: Invalid reservationID.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Reservation not found
      deprecated: false
    delete:
      tags:
        - reservation-controller
      summary: Cancels a reservation by ID
      operationId: cancelReservationUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: reservationId
          in: path
          description: reservationId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Reservation successfully cancelled.
          schema:
            $ref: '#/definitions/ReservationDTO'
        '204':
          description: No Content
        '400':
          description: Invalid reservationID.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Reservation not found
      deprecated: false
  /schedules:
    get:
      tags:
        - schedule-controller
      summary: Searches schedules between two given dates with the possibility to check containing only available items
      operationId: findSchedulesUsingGET
      produces:
        - '*/*'
      parameters:
        - name: available
          in: query
          description: available
          required: false
          type: boolean
          default: false
        - name: endDate
          in: query
          description: endDate
          required: true
          type: string
          format: date
        - name: startDate
          in: query
          description: startDate
          required: true
          type: string
          format: date
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ScheduleDTO'
        '201':
          description: List of schedules successfully returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/ScheduleDTO'
        '400':
          description: Invalid start or end date.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: No schedules found
      deprecated: false
    post:
      tags:
        - schedule-controller
      summary: Schedules an appointment for tennis court
      operationId: addScheduleTennisCourtUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: createScheduleRequestDTO
          description: createScheduleRequestDTO
          required: true
          schema:
            $ref: '#/definitions/CreateScheduleRequestDTO'
      responses:
        '200':
          description: OK
        '201':
          description: Schedule successfully created.
        '400':
          description: Invalid tennisCourtID or startDate.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Tennis court not found
      deprecated: false
  /schedules/{scheduleId}:
    get:
      tags:
        - schedule-controller
      summary: Finds a schedule by ID
      operationId: findByScheduleIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: scheduleId
          in: path
          description: scheduleId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Schedule successfully returned.
          schema:
            $ref: '#/definitions/ScheduleDTO'
        '400':
          description: Invalid scheduleID.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Schedule not found
      deprecated: false
  /tennis-courts:
    post:
      tags:
        - tennis-court-controller
      summary: Adds a tennis court
      operationId: addTennisCourtUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: tennisCourtDTO
          description: tennisCourtDTO
          required: true
          schema:
            $ref: '#/definitions/TennisCourtDTO'
      responses:
        '200':
          description: OK
        '201':
          description: Tennis court successfully created.
        '400':
          description: Invalid input data.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /tennis-courts/{tennisCourtId}:
    get:
      tags:
        - tennis-court-controller
      summary: Finds a tennis court by ID
      operationId: findTennisCourtByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: tennisCourtId
          in: path
          description: tennisCourtId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Tennis court successfully found.
          schema:
            $ref: '#/definitions/TennisCourtDTO'
        '400':
          description: Invalid tennisCourtID.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Tennis court not found
      deprecated: false
  /tennis-courts/{tennisCourtId}/schedules:
    get:
      tags:
        - tennis-court-controller
      summary: Finds a tennis court with schedules by ID
      operationId: findTennisCourtWithSchedulesByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: tennisCourtId
          in: path
          description: tennisCourtId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Tennis court schedules successfully found.
          schema:
            $ref: '#/definitions/TennisCourtDTO'
        '400':
          description: Invalid tennisCourtID.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Tennis court schedules not Found
      deprecated: false
definitions:
  CreateReservationRequestDTO:
    type: object
    properties:
      guestId:
        type: integer
        format: int64
      scheduleId:
        type: integer
        format: int64
    title: CreateReservationRequestDTO
  CreateScheduleRequestDTO:
    type: object
    properties:
      startDateTime:
        type: string
        format: date-time
      tennisCourtId:
        type: integer
        format: int64
    title: CreateScheduleRequestDTO
  GuestDTO:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    title: GuestDTO
  RescheduleReservationRequestDTO:
    type: object
    properties:
      reservationId:
        type: integer
        format: int64
      scheduleId:
        type: integer
        format: int64
    title: RescheduleReservationRequestDTO
  ReservationDTO:
    type: object
    properties:
      guest:
        $ref: '#/definitions/GuestDTO'
      guestId:
        type: integer
        format: int64
      id:
        type: integer
        format: int64
      previousReservation:
        $ref: '#/definitions/ReservationDTO'
      refundValue:
        type: number
      reservationStatus:
        type: string
      schedule:
        $ref: '#/definitions/ScheduleDTO'
      scheduledId:
        type: integer
        format: int64
      value:
        type: number
    title: ReservationDTO
  ScheduleDTO:
    type: object
    properties:
      endDateTime:
        type: string
        format: date-time
      id:
        type: integer
        format: int64
      startDateTime:
        type: string
        format: date-time
      tennisCourt:
        $ref: '#/definitions/TennisCourtDTO'
      tennisCourtId:
        type: integer
        format: int64
    title: ScheduleDTO
  TennisCourtDTO:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      tennisCourtSchedules:
        type: array
        items:
          $ref: '#/definitions/ScheduleDTO'
    title: TennisCourtDTO
